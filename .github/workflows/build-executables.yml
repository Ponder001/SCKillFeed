# GitHub Actions workflow to build single-file executables for Linux, macOS and Windows
# Preview for your fork (entry point: launcher.py)
on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  PYTHON_VERSION: "3.11"
  ENTRY_SCRIPT: "launcher.py"    # <--- entrypoint set to launcher.py

jobs:
  build:
    name: Build executables for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps (Linux / macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
          pip install pyinstaller

      - name: Install deps (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path 'requirements.txt') { pip install -r requirements.txt } else { Write-Host 'no requirements.txt' }
          pip install pyinstaller

      - name: Build (Linux / macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "Building on $RUNNER_OS"
          if [ ! -f "${{ env.ENTRY_SCRIPT }}" ]; then
            echo "Entry script '${{ env.ENTRY_SCRIPT }}' not found"
            exit 1
          fi
          pyinstaller --onefile --noconfirm --clean --name "SCKillFeed" "${{ env.ENTRY_SCRIPT }}"

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Building on Windows"
          $entry = "${{ env.ENTRY_SCRIPT }}"
          if (-not (Test-Path $entry)) { Write-Error "Entry script $entry not found"; exit 1 }
          pyinstaller --onefile --noconfirm --clean --name "SCKillFeed" $entry

      - name: Package artifact (Linux / macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)
          case "${{ matrix.os }}" in
            "ubuntu-latest") PLATFORM="linux" ;;
            "macos-latest") PLATFORM="macos" ;;
            *) PLATFORM="${{ matrix.os }}" ;;
          esac
          OUT_DIR="dist"
          ARTIFACT_NAME="SCKillFeed-${PLATFORM}-${COMMIT_SHA}.zip"
          if [ -d "$OUT_DIR" ]; then
            zip -r "$ARTIFACT_NAME" "$OUT_DIR"
          else
            echo "No $OUT_DIR directory produced by PyInstaller"
            exit 1
          fi
          echo "Artifact: $ARTIFACT_NAME"

      - name: Package artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $commit = git rev-parse --short HEAD
          $platform = "windows"
          $out = "dist"
          $artifact = "SCKillFeed-$platform-$commit.zip"
          if (-not (Test-Path $out)) { Write-Error "No $out directory produced by PyInstaller"; exit 1 }
          Compress-Archive -Path "$out\*" -DestinationPath $artifact -Force
          Write-Host "Artifact: $artifact"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sckillfeed-executable-${{ matrix.os }}
          path: |
            SCKillFeed-*.zip
            dist/*

      - name: Cleanup build files (Linux / macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          rm -rf build dist __pycache__ *.spec || true

      - name: Cleanup build files (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force build,dist,__pycache__ -ErrorAction SilentlyContinue
          Get-ChildItem -Filter *.spec -ErrorAction SilentlyContinue | Remove-Item -Force -ErrorAction SilentlyContinue
